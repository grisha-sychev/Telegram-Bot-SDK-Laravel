<?php

namespace Bot\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Artisan;

class PublishCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'bot:publish {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã} {--tag=* : –¢–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $force = $this->option('force');
        $tags = $this->option('tag');
        
        $this->info('üì¶ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–∞–∫–µ—Ç–∞ Telegram Bot SDK...');
        
        if ($force) {
            $this->warn('‚ö†Ô∏è  –†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if (empty($tags)) {
            $tags = ['bot']; // –ü—É–±–ª–∏–∫—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        $this->info('üè∑Ô∏è  –¢–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' . implode(', ', $tags));
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Ñ–∞–π–ª—ã
        foreach ($tags as $tag) {
            if ($force) {
                $this->publishWithForce($tag);
            } else {
                $this->publishTag($tag, $force);
            }
        }
        
        $this->info('‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        
        return 0;
    }
    
    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–µ–≥—É
     */
    private function publishTag(string $tag, bool $force): void
    {
        $this->line("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–≥–∞: {$tag}");
        
        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            $result = Artisan::call('vendor:publish', [
                '--provider' => 'Bot\Providers\BotServiceProvider',
                '--tag' => $tag,
                '--force' => $force
            ]);
            
            if ($result === 0) {
                $this->info("‚úÖ –¢–µ–≥ '{$tag}' –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            } else {
                $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–≥–∞ '{$tag}'");
            }
            
        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–≥–∞ '{$tag}': " . $e->getMessage());
        }
    }
    
    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
     */
    private function publishWithForce(string $tag): void
    {
        $this->line("üì§ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–≥–∞: {$tag}");
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        $paths = $this->getPathsForTag($tag);
        
        foreach ($paths as $source => $destination) {
            $this->copyFile($source, $destination, true);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥—É
     */
    private function getPathsForTag(string $tag): array
    {
        $paths = [];
        
        // –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø–∞–∫–µ—Ç—É
        $packagePath = __DIR__ . '/../../..';
        
        switch ($tag) {
            case 'bot-config':
            case 'config':
                $paths[$packagePath . '/config/bot.php'] = config_path('bot.php');
                break;
                
            case 'bot-app':
            case 'app':
                $paths[$packagePath . '/app'] = app_path();
                break;
                
            case 'bot-routes':
            case 'routes':
                $paths[$packagePath . '/routes'] = base_path('routes');
                break;
                
            case 'bot-database':
            case 'database':
            case 'migrations':
                $paths[$packagePath . '/database'] = database_path();
                break;
                
            case 'bot-lang':
            case 'lang':
                $paths[$packagePath . '/resources/lang'] = base_path('resources/lang');
                break;
                
            case 'bot':
            default:
                $paths = [
                    $packagePath . '/app' => app_path(),
                    $packagePath . '/config' => config_path(),
                    $packagePath . '/database' => database_path(),
                    $packagePath . '/routes' => base_path('routes'),
                    $packagePath . '/resources' => base_path('resources'),
                ];
                break;
        }
        
        return $paths;
    }
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
     */
    private function copyFile(string $source, string $destination, bool $force = false): void
    {
        if (!file_exists($source)) {
            $this->warn("‚ö†Ô∏è  –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {$source}");
            return;
        }
        
        if (is_dir($source)) {
            $this->copyDirectory($source, $destination, $force);
        } else {
            $this->copySingleFile($source, $destination, $force);
        }
    }
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
     */
    private function copyDirectory(string $source, string $destination, bool $force): void
    {
        if (!is_dir($source)) {
            return;
        }
        
        if (!is_dir($destination)) {
            mkdir($destination, 0755, true);
        }
        
        $files = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($source, \RecursiveDirectoryIterator::SKIP_DOTS),
            \RecursiveIteratorIterator::SELF_FIRST
        );
        
        foreach ($files as $file) {
            $filePath = $file->getRealPath();
            $relativePath = substr($filePath, strlen($source) + 1);
            $destPath = $destination . '/' . $relativePath;
            
            if ($file->isDir()) {
                if (!is_dir($destPath)) {
                    mkdir($destPath, 0755, true);
                }
            } else {
                $this->copySingleFile($filePath, $destPath, $force);
            }
        }
    }
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
     */
    private function copySingleFile(string $source, string $destination, bool $force): void
    {
        $destDir = dirname($destination);
        
        if (!is_dir($destDir)) {
            mkdir($destDir, 0755, true);
        }
        
        if (file_exists($destination) && !$force) {
            $this->line("‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç): " . basename($destination));
            return;
        }
        
        if (copy($source, $destination)) {
            $this->line("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: " . basename($destination));
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: " . basename($destination));
        }
    }
} 