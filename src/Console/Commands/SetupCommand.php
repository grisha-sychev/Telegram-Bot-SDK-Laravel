<?php

namespace Teg\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class SetupCommand extends Command
{
    protected $signature = 'teg:set {--webhook= : Webhook URL} {--force : Force setup without confirmation}';
    protected $description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ TegBot';

    public function handle()
    {
        $this->info('üöÄ TegBot Setup Wizard');
        $this->newLine();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        $token = $this->checkToken();
        if (!$token) {
            return 1;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        $botInfo = $this->getBotInfo($token);
        if (!$botInfo) {
            return 1;
        }

        $this->displayBotInfo($botInfo);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if ($this->option('webhook') || $this->confirm('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook?', true)) {
            $this->setupWebhook($token);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $this->setupConfiguration();

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        $this->createDirectories();

        $this->newLine();
        $this->info('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TegBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        $this->line('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: vendor/tegbot/tegbot/docs/');
        $this->line('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: php artisan teg:health');

        return 0;
    }

    private function checkToken(): ?string
    {
        $token = config('tegbot.token', env('TEGBOT_TOKEN'));

        if (!$token) {
            $this->error('‚ùå TEGBOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            $this->line('–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
            $this->line('TEGBOT_TOKEN=your_bot_token_here');
            $this->newLine();
            $this->line('–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://t.me/botfather');
            return null;
        }

        if (!preg_match('/^\d+:[A-Za-z0-9_-]{35}$/', $token)) {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
            return null;
        }

        $this->info('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω');
        return $token;
    }

    private function getBotInfo(string $token): ?array
    {
        try {
            $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getMe");
            
            if ($response->successful()) {
                return $response->json()['result'];
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ API: ' . $response->status());
                return null;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
            return null;
        }
    }

    private function displayBotInfo(array $botInfo): void
    {
        $this->info('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
        $this->line("  üìù –ò–º—è: {$botInfo['first_name']}");
        $this->line("  üÜî Username: @{$botInfo['username']}");
        $this->line("  üì° ID: {$botInfo['id']}");
        
        if (isset($botInfo['description'])) {
            $this->line("  üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {$botInfo['description']}");
        }
        
        $this->newLine();
    }

    private function setupWebhook(string $token): void
    {
        $webhookUrl = $this->option('webhook');
        
        if (!$webhookUrl) {
            $webhookUrl = $this->ask('–í–≤–µ–¥–∏—Ç–µ URL webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://yourdomain.com/telegram/webhook)');
        }

        if (!$webhookUrl) {
            $this->warn('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if (!filter_var($webhookUrl, FILTER_VALIDATE_URL) || !str_starts_with($webhookUrl, 'https://')) {
            $this->error('‚ùå URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º secret –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        $secret = config('tegbot.security.webhook_secret', env('TEGBOT_WEBHOOK_SECRET'));
        if (!$secret) {
            $secret = Str::random(32);
            $this->warn('‚ö†Ô∏è  Webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:');
            $this->line("TEGBOT_WEBHOOK_SECRET={$secret}");
            $this->newLine();
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        try {
            $payload = [
                'url' => $webhookUrl,
                'max_connections' => 40,
                'allowed_updates' => [
                    'message',
                    'callback_query',
                    'inline_query',
                    'chosen_inline_result'
                ]
            ];

            if ($secret) {
                $payload['secret_token'] = $secret;
            }

            $response = Http::post("https://api.telegram.org/bot{$token}/setWebhook", $payload);
            
            if ($response->successful()) {
                $this->info('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                $this->line("  üåê URL: {$webhookUrl}");
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . ($result['description'] ?? 'Unknown error'));
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . $e->getMessage());
        }
    }

    private function setupConfiguration(): void
    {
        $this->info('‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

        $configPath = config_path('tegbot.php');
        
        if (!file_exists($configPath)) {
            $this->warn('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
            
            if ($this->confirm('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?', true)) {
                $this->call('vendor:publish', [
                    '--provider' => 'Teg\Providers\TegbotServiceProvider',
                    '--tag' => 'config'
                ]);
            }
        } else {
            $this->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        $this->checkConfigurationValues();
    }

    private function checkConfigurationValues(): void
    {
        $warnings = [];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º admin IDs
        $adminIds = config('tegbot.security.admin_ids', []);
        if (empty($adminIds)) {
            $warnings[] = 'TEGBOT_ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook secret
        $webhookSecret = config('tegbot.security.webhook_secret');
        if (empty($webhookSecret)) {
            $warnings[] = 'TEGBOT_WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)';
        }

        if (!empty($warnings)) {
            $this->warn('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env:');
            foreach ($warnings as $warning) {
                $this->line("  - {$warning}");
            }
            $this->newLine();
        }
    }

    private function createDirectories(): void
    {
        $this->info('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');

        $directories = [
            storage_path('app/tegbot/downloads'),
            storage_path('app/tegbot/temp'),
            storage_path('logs/tegbot'),
        ];

        foreach ($directories as $dir) {
            if (!is_dir($dir)) {
                try {
                    mkdir($dir, 0755, true);
                    $this->line("  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {$dir}");
                } catch (\Exception $e) {
                    $this->error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {$dir}: {$e->getMessage()}");
                }
            } else {
                $this->line("  ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {$dir}");
            }
        }
    }
} 