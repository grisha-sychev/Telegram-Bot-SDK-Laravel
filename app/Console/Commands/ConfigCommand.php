<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Arr;

class ConfigCommand extends Command
{
    protected $signature = 'bot:config 
                            {action? : Action (show, get, set, reset)}
                            {key? : Configuration key}
                            {value? : Configuration value}
                            {--format=table : Output format (table, json, yaml)}';
    
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞';

    public function handle()
    {
        $action = $this->argument('action') ?? 'show';

        switch ($action) {
            case 'show':
                return $this->showConfig();
            case 'get':
                return $this->getConfig();
            case 'set':
                return $this->setConfig();
            case 'reset':
                return $this->resetConfig();
            case 'validate':
                return $this->validateConfig();
            default:
                $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                $this->line('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: show, get, set, reset, validate');
                return 1;
        }
    }

    private function showConfig(): int
    {
        $this->info('‚öôÔ∏è  Bot Configuration');
        $this->newLine();

        $config = config('bot', []);
        $format = $this->option('format');

        switch ($format) {
            case 'json':
                $this->line(json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                break;
            case 'yaml':
                $this->line($this->arrayToYaml($config));
                break;
            default:
                $this->displayConfigTable($config);
        }

        return 0;
    }

    private function getConfig(): int
    {
        $key = $this->argument('key');
        
        if (!$key) {
            $key = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: api.timeout)');
        }

        if (!$key) {
            $this->error('‚ùå –ö–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω');
            return 1;
        }

                    $value = config("bot.{$key}");
        
        if ($value === null) {
            $this->warn("‚ö†Ô∏è  –ö–ª—é—á '{$key}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

                    $this->info("bot.{$key}:");
        
        if (is_array($value)) {
            $this->line(json_encode($value, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        } else {
            $this->line((string) $value);
        }

        return 0;
    }

    private function setConfig(): int
    {
        $key = $this->argument('key');
        $value = $this->argument('value');

        if (!$key) {
            $key = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        }

        if (!$value) {
            $value = $this->ask("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{$key}'");
        }

        if (!$key || $value === null) {
            $this->error('‚ùå –ö–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return 1;
        }

        // –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ
        $parsedValue = $this->parseValue($value);

        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–ª—é—á
        if (!$this->isValidConfigKey($key)) {
            $this->error("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {$key}");
            return 1;
        }

                    $this->info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ bot.{$key} = " . json_encode($parsedValue));
        
        if (!$this->confirm('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?', true)) {
            $this->info('–û—Ç–º–µ–Ω–µ–Ω–æ');
            return 0;
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
        $this->warn('‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏–ª–∏ .env —Ñ–∞–π–ª');
        
        $this->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)');

        return 0;
    }

    private function resetConfig(): int
    {
        if (!$this->confirm('‚ö†Ô∏è  –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?', false)) {
            $this->info('–û—Ç–º–µ–Ω–µ–Ω–æ');
            return 0;
        }

        $this->warn('‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        
        $this->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');

        return 0;
    }

    private function validateConfig(): int
    {
        $this->info('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...');
        $this->newLine();

        $errors = [];
        $warnings = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            $botsCount = \App\Models\Bot::where('enabled', true)->count();
            if ($botsCount === 0) {
                $errors[] = '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
            } else {
                $this->info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {$botsCount}");
            }
        } catch (\Exception $e) {
            $errors[] = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook secret
        $webhookSecret = config('bot.security.webhook_secret');
        if (!$webhookSecret) {
            $warnings[] = 'BOT_WEBHOOK_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)';
        } elseif (strlen($webhookSecret) < 16) {
            $warnings[] = 'BOT_WEBHOOK_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤)';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ admin IDs
        $adminIds = config('bot.security.admin_ids', []);
        if (empty($adminIds)) {
            $warnings[] = 'BOT_ADMIN_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
        } else {
            foreach ($adminIds as $id) {
                if (!is_numeric($id)) {
                    $errors[] = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç admin ID: {$id}";
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
        $downloadPath = config('bot.files.download_path');
        if ($downloadPath && !is_dir($downloadPath)) {
            $warnings[] = "–ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {$downloadPath}";
        } elseif ($downloadPath && !is_writable($downloadPath)) {
            $errors[] = "–ü—É—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏: {$downloadPath}";
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        $maxFileSize = config('bot.files.max_file_size');
        if ($maxFileSize && $maxFileSize > 50 * 1024 * 1024) {
            $warnings[] = "–õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π: " . $this->formatFileSize($maxFileSize);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–∞—Å—Ç—Ä–æ–µ–∫
        $apiTimeout = config('bot.api.timeout');
        if ($apiTimeout && $apiTimeout > 60) {
            $warnings[] = "API timeout –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π: {$apiTimeout}s";
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if (empty($errors) && empty($warnings)) {
            $this->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
            return 0;
        }

        if (!empty($errors)) {
            $this->error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:');
            foreach ($errors as $error) {
                $this->line("  - {$error}");
            }
            $this->newLine();
        }

        if (!empty($warnings)) {
            $this->warn('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
            foreach ($warnings as $warning) {
                $this->line("  - {$warning}");
            }
        }

        return empty($errors) ? 0 : 1;
    }

    private function displayConfigTable(array $config): void
    {
        $rows = [];
        $this->flattenConfig($config, '', $rows);

        $this->table(['–ö–ª—é—á', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–¢–∏–ø'], $rows);
    }

    private function flattenConfig(array $config, string $prefix, array &$rows): void
    {
        foreach ($config as $key => $value) {
            $fullKey = $prefix ? "{$prefix}.{$key}" : $key;

            if (is_array($value)) {
                if (empty($value)) {
                    $rows[] = [$fullKey, '[]', 'array'];
                } else {
                    $this->flattenConfig($value, $fullKey, $rows);
                }
            } else {
                $type = gettype($value);
                $displayValue = $this->formatValue($value);
                $rows[] = [$fullKey, $displayValue, $type];
            }
        }
    }

    private function formatValue($value): string
    {
        if (is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        if (is_null($value)) {
            return 'null';
        }

        if (is_string($value) && strlen($value) > 50) {
            return substr($value, 0, 47) . '...';
        }

        return (string) $value;
    }

    private function parseValue(string $value)
    {
        // –ë—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è
        if (in_array(strtolower($value), ['true', 'false'])) {
            return strtolower($value) === 'true';
        }

        // Null
        if (strtolower($value) === 'null') {
            return null;
        }

        // –ß–∏—Å–ª–∞
        if (is_numeric($value)) {
            return str_contains($value, '.') ? (float) $value : (int) $value;
        }

        // –ú–∞—Å—Å–∏–≤—ã (JSON)
        if (str_starts_with($value, '[') || str_starts_with($value, '{')) {
            $decoded = json_decode($value, true);
            if (json_last_error() === JSON_ERROR_NONE) {
                return $decoded;
            }
        }

        // –°—Ç—Ä–æ–∫–∞
        return $value;
    }

    private function isValidConfigKey(string $key): bool
    {
        $allowedKeys = [
            'token', 'debug', 'timezone',
            'api.base_url', 'api.timeout', 'api.retries', 'api.retry_delay', 'api.user_agent',
            'security.webhook_secret', 'security.admin_ids', 'security.allowed_ips',
            'security.spam_protection.enabled', 'security.spam_protection.max_messages_per_minute',
            'security.rate_limits.global', 'security.rate_limits.per_user', 'security.rate_limits.per_chat',
            'files.download_path', 'files.temp_path', 'files.max_file_size', 'files.allowed_types',
            'logging.enabled', 'logging.level', 'logging.retention_days',
            'cache.enabled', 'cache.driver', 'cache.ttl',
            'monitoring.health_checks.enabled', 'monitoring.alerts.enabled',
        ];

        return in_array($key, $allowedKeys) || str_starts_with($key, 'experimental.');
    }

    private function arrayToYaml(array $array, int $indent = 0): string
    {
        $yaml = '';
        $spaces = str_repeat('  ', $indent);

        foreach ($array as $key => $value) {
            if (is_array($value)) {
                $yaml .= "{$spaces}{$key}:\n";
                $yaml .= $this->arrayToYaml($value, $indent + 1);
            } else {
                $formattedValue = $this->formatYamlValue($value);
                $yaml .= "{$spaces}{$key}: {$formattedValue}\n";
            }
        }

        return $yaml;
    }

    private function formatYamlValue($value): string
    {
        if (is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        if (is_null($value)) {
            return 'null';
        }

        if (is_string($value) && (str_contains($value, ' ') || str_contains($value, ':'))) {
            return '"' . str_replace('"', '\"', $value) . '"';
        }

        return (string) $value;
    }

    private function formatFileSize(int $bytes): string
    {
        $units = ['B', 'KB', 'MB', 'GB'];
        $i = 0;

        while ($bytes >= 1024 && $i < count($units) - 1) {
            $bytes /= 1024;
            $i++;
        }

        return round($bytes, 2) . ' ' . $units[$i];
    }
} 