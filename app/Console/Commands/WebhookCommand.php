<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use App\Models\Bot;

class WebhookCommand extends Command
{
    protected $signature = 'bot:webhook 
                            {action : Action (set, info, delete, test, auto, restart)}
                            {bot? : Bot name or ID}
                            {url? : Webhook URL (for set action)}
                            {--secret= : Webhook secret token}
                            {--max-connections=40 : Max webhook connections}
                            {--no-ssl : Disable SSL verification}
                            {--force : Force action without confirmation}
                            {--environment= : Environment (dev, prod) - if not specified, uses current APP_ENV}';
    
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook Bot';

    public function handle()
    {
        $action = $this->argument('action');
        $botIdentifier = $this->argument('bot');

        // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
        if (!$botIdentifier) {
            $bots = Bot::enabled()->get();
            if ($bots->isEmpty()) {
                $this->error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤');
                $this->line('–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞: php artisan bot:new');
                return 1;
            }

            $botNames = $bots->pluck('name')->toArray();
            $botIdentifier = $this->choice('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞:', $botNames);
        }

        // –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
        $bot = $this->findBot($botIdentifier);
        if (!$bot) {
            $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return 1;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–ø—Ü–∏—è --environment, –∑–∞—Ç–µ–º APP_ENV)
        $environment = $this->option('environment');
        if ($environment && !in_array($environment, ['dev', 'prod'])) {
            $this->error('‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å dev –∏–ª–∏ prod');
            return 1;
        }
        
        $currentEnvironment = $environment ?: Bot::getCurrentEnvironment();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!$bot->hasTokenForEnvironment($currentEnvironment)) {
            $this->error("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{$currentEnvironment}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É –±–æ—Ç–∞ '{$bot->name}'");
            return 1;
        }

        $token = $bot->getTokenForEnvironment($currentEnvironment);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        if ($environment) {
            $this->info("üåç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
        }

        switch ($action) {
            case 'set':
                return $this->setWebhook($bot, $token);
            case 'info':
                return $this->getWebhookInfo($bot, $token);
            case 'delete':
                return $this->deleteWebhook($bot, $token);
            case 'test':
                return $this->testWebhook($bot, $token);
            case 'auto':
                return $this->autoWebhook($bot, $token, $currentEnvironment);
            case 'restart':
                return $this->restartWebhook($bot, $token, $currentEnvironment);
            case 'check':
                return $this->checkWebhook($bot, $token, $currentEnvironment);
            default:
                $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                $this->line('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: set, info, delete, test, auto, restart, check');
                return 1;
        }
    }

    private function setWebhook(Bot $bot, string $token): int
    {
        $url = $this->argument('url');
        $currentEnvironment = Bot::getCurrentEnvironment();
        
        if (!$url) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            $domain = $bot->getDomainForEnvironment($currentEnvironment);
            
            if ($domain) {
                $defaultUrl = rtrim($domain, '/') . "/webhook/{$bot->name}";
                $url = $this->ask('–í–≤–µ–¥–∏—Ç–µ URL webhook', $defaultUrl);
            } else {
                $url = $this->ask('–í–≤–µ–¥–∏—Ç–µ URL webhook');
            }
        }

        if (!$url) {
            $this->error('‚ùå URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            return 1;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if (!filter_var($url, FILTER_VALIDATE_URL)) {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
            return 1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS (–∫—Ä–æ–º–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤)
        $isLocal = str_contains($url, 'localhost') ||
            str_contains($url, '127.0.0.1') ||
            str_contains($url, '192.168.') ||
            str_contains($url, '.local');

        if (!str_starts_with($url, 'https://') && !$isLocal) {
            $this->error('‚ùå URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS (–∫—Ä–æ–º–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤)');
            return 1;
        }

        if (!str_starts_with($url, 'https://') && $isLocal) {
            $this->warn('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)');
        }

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        $secret = $this->option('secret') ?? config('bot.security.webhook_secret', env('BOT_WEBHOOK_SECRET'));
        $maxConnections = $this->option('max-connections');

        if (!$secret) {
            if ($this->confirm('–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å webhook secret –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?', true)) {
                $secret = Str::random(32);
                $this->warn("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω secret: {$secret}");
                $this->warn('–î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
                $this->line("BOT_WEBHOOK_SECRET={$secret}");
                $this->newLine();
            }
        }

        $payload = [
            'url' => $url,
            'max_connections' => $maxConnections,
            'allowed_updates' => [
                'message',
                'callback_query',
                'inline_query',
                'chosen_inline_result',
                'channel_post',
                'edited_message',
                'edited_channel_post'
            ]
        ];

        if ($secret) {
            $payload['secret_token'] = $secret;
        }

        $this->info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");
        $this->line("üåê URL: {$url}");
        $this->line("üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");

        try {
            $response = Http::timeout(30)->post("https://api.telegram.org/bot{$token}/setWebhook", $payload);

            if ($response->successful()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)
                $relativeUrl = "/webhook/{$bot->name}";
                $bot->update([
                    'webhook_url' => $relativeUrl,
                    'webhook_secret' => $secret,
                ]);

                $this->info('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                $this->line("üåê –ü–æ–ª–Ω—ã–π URL: {$url}");
                $this->line("üìù –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –ë–î: {$relativeUrl}");
                if ($secret) {
                    $this->line("üîê Secret: {$secret}");
                }
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . ($result['description'] ?? 'Unknown error'));
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function getWebhookInfo(Bot $bot, string $token): int
    {
        $this->info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");

        try {
            $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getWebhookInfo");

            if ($response->successful()) {
                $info = $response->json()['result'];
                $this->displayWebhookInfo($info);
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook');
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function deleteWebhook(Bot $bot, string $token): int
    {
        $this->info("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");

        if (!$this->option('force') && !$this->confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å webhook?', false)) {
            $this->info('–û—Ç–º–µ–Ω–µ–Ω–æ');
            return 0;
        }

        try {
            $response = Http::timeout(10)->post("https://api.telegram.org/bot{$token}/deleteWebhook");

            if ($response->successful()) {
                // –û—á–∏—â–∞–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                $bot->update([
                    'webhook_url' => null,
                    'webhook_secret' => null,
                ]);

                $this->info('‚úÖ Webhook —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ' . ($result['description'] ?? 'Unknown error'));
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function testWebhook(Bot $bot, string $token): int
    {
        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");

        try {
            $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getWebhookInfo");

            if ($response->successful()) {
                $info = $response->json()['result'];
                
                if (!$info['url']) {
                    $this->warn('‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
                    return 0;
                }

                $this->line("üåê URL: {$info['url']}");
                $this->line("üìä –û—à–∏–±–æ–∫: " . ($info['last_error_message'] ?? '–ù–µ—Ç'));
                $this->line("üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " . ($info['last_error_date'] ? date('d.m.Y H:i:s', $info['last_error_date']) : '–ù–µ—Ç'));

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                $this->checkSSL($info['url']);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if ($this->confirm('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?', false)) {
                    $secret = $bot->webhook_secret;
                    $this->sendTestUpdate($info['url'], $secret);
                }
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook');
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function autoWebhook(Bot $bot, string $token, string $currentEnvironment): int
    {
        $this->info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");
        $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $domain = $bot->getDomainForEnvironment($currentEnvironment);
        if (!$domain) {
            $this->error("‚ùå –î–æ–º–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{$currentEnvironment}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            return 1;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º webhook URL
        $webhookUrl = rtrim($domain, '/') . "/webhook/{$bot->name}";
        $secret = $bot->webhook_secret;

        $this->info("üåê Webhook URL: {$webhookUrl}");

        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            $this->info('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
            $response = Http::timeout(10)->post("https://api.telegram.org/bot{$token}/deleteWebhook");
            
            if (!$response->successful()) {
                $result = $response->json();
                $this->warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ' . ($result['description'] ?? 'Unknown error'));
            } else {
                $this->info('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            $this->info('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...');
            
            $payload = [
                'url' => $webhookUrl,
                'max_connections' => 40,
                'allowed_updates' => [
                    'message',
                    'callback_query',
                    'inline_query',
                    'chosen_inline_result',
                    'channel_post',
                    'edited_message',
                    'edited_channel_post'
                ]
            ];

            if ($secret) {
                $payload['secret_token'] = $secret;
            }

            $response = Http::timeout(30)->post("https://api.telegram.org/bot{$token}/setWebhook", $payload);

            if ($response->successful()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)
                $relativeUrl = "/webhook/{$bot->name}";
                $bot->update([
                    'webhook_url' => $relativeUrl,
                    'webhook_secret' => $secret,
                ]);

                $this->info('‚úÖ Webhook –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                $this->line("üåê –ü–æ–ª–Ω—ã–π URL: {$webhookUrl}");
                $this->line("üìù –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –ë–î: {$relativeUrl}");
                $this->line("üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
                if ($secret) {
                    $this->line("üîê Secret: {$secret}");
                }
                
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . ($result['description'] ?? 'Unknown error'));
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è webhook: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function restartWebhook(Bot $bot, string $token, string $currentEnvironment): int
    {
        $this->info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");
        $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $domain = $bot->getDomainForEnvironment($currentEnvironment);
        if (!$domain) {
            $this->error("‚ùå –î–æ–º–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{$currentEnvironment}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            return 1;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º webhook URL
        $webhookUrl = rtrim($domain, '/') . "/webhook/{$bot->name}";
        $secret = $bot->webhook_secret;

        $this->info("üåê Webhook URL: {$webhookUrl}");

        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            $this->info('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
            $response = Http::timeout(10)->post("https://api.telegram.org/bot{$token}/deleteWebhook");
            
            if (!$response->successful()) {
                $result = $response->json();
                $this->warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ' . ($result['description'] ?? 'Unknown error'));
            } else {
                $this->info('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            $this->info('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...');
            
            $payload = [
                'url' => $webhookUrl,
                'max_connections' => 40,
                'allowed_updates' => [
                    'message',
                    'callback_query',
                    'inline_query',
                    'chosen_inline_result',
                    'channel_post',
                    'edited_message',
                    'edited_channel_post'
                ]
            ];

            if ($secret) {
                $payload['secret_token'] = $secret;
            }

            $response = Http::timeout(30)->post("https://api.telegram.org/bot{$token}/setWebhook", $payload);

            if ($response->successful()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å)
                $relativeUrl = "/webhook/{$bot->name}";
                $bot->update([
                    'webhook_url' => $relativeUrl,
                    'webhook_secret' => $secret,
                ]);

                $this->info('‚úÖ Webhook –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                $this->line("üåê –ü–æ–ª–Ω—ã–π URL: {$webhookUrl}");
                $this->line("üìù –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –≤ –ë–î: {$relativeUrl}");
                $this->line("üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
                if ($secret) {
                    $this->line("üîê Secret: {$secret}");
                }
                
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . ($result['description'] ?? 'Unknown error'));
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webhook: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function checkWebhook(Bot $bot, string $token, string $currentEnvironment): int
    {
        $this->info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è webhook –¥–ª—è –±–æ—Ç–∞ '{$bot->name}'...");
        $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $domain = $bot->getDomainForEnvironment($currentEnvironment);
        if (!$domain) {
            $this->error("‚ùå –î–æ–º–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{$currentEnvironment}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            return 1;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º webhook URL
        $webhookUrl = rtrim($domain, '/') . "/webhook/{$bot->name}";
        $secret = $bot->webhook_secret;

        $this->info("üåê Webhook URL: {$webhookUrl}");

        try {
            $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getWebhookInfo");

            if ($response->successful()) {
                $info = $response->json()['result'];
                $this->displayWebhookInfo($info);

                $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
                $this->line("üåê Webhook URL: {$webhookUrl}");

                if ($info['url'] === $webhookUrl) {
                    $this->info('‚úÖ Webhook —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é');
                } else {
                    $this->warn('‚ö†Ô∏è  Webhook URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é. –û–∂–∏–¥–∞–ª–æ—Å—å: ' . $webhookUrl);
                }

                if ($info['secret_token'] === $secret) {
                    $this->info('‚úÖ Secret token —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é');
                } else {
                    $this->warn('‚ö†Ô∏è  Secret token –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é. –û–∂–∏–¥–∞–ª–æ—Å—å: ' . $secret);
                }

                if ($info['max_connections'] === 40) {
                    $this->info('‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é');
                } else {
                    $this->warn('‚ö†Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é. –û–∂–∏–¥–∞–ª–æ—Å—å: 40');
                }

                if ($info['allowed_updates'] === ['message', 'callback_query', 'inline_query', 'chosen_inline_result', 'channel_post', 'edited_message', 'edited_channel_post']) {
                    $this->info('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é');
                } else {
                    $this->warn('‚ö†Ô∏è  –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–∫—É—â–µ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é. –û–∂–∏–¥–∞–ª–æ—Å—å: message, callback_query, inline_query, chosen_inline_result, channel_post, edited_message, edited_channel_post');
                }

            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
                return 1;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: ' . $e->getMessage());
            return 1;
        }

        return 0;
    }

    private function findBot(string $identifier): ?Bot
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ –∏–º—è
        if (is_numeric($identifier)) {
            return Bot::find($identifier);
        } else {
            return Bot::byName($identifier)->first();
        }
    }

    private function displayWebhookInfo(array $info): void
    {
        $this->info('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
        $this->newLine();

        if ($info['url']) {
            $this->line("üåê URL: {$info['url']}");
            $this->line("üîê Secret: " . ($info['has_custom_certificate'] ? '–î–∞' : '–ù–µ—Ç'));
            $this->line("üìä –ú–∞–∫—Å. —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {$info['max_connections']}");
            $this->line("üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: " . ($info['last_error_date'] ? date('d.m.Y H:i:s', $info['last_error_date']) : '–ù–µ—Ç'));
            
            if ($info['last_error_message']) {
                $this->line("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {$info['last_error_message']}");
            }

            $this->line("üìà –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$info['pending_update_count']}");
        } else {
            $this->line("‚ùå Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }

        $this->newLine();
    }

    private function checkSSL(string $url): void
    {
        $this->line('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');

        try {
            $context = stream_context_create([
                'ssl' => [
                    'verify_peer' => true,
                    'verify_peer_name' => true,
                ]
            ]);

            $host = parse_url($url, PHP_URL_HOST);
            $port = parse_url($url, PHP_URL_PORT) ?: 443;

            $socket = stream_socket_client(
                "ssl://{$host}:{$port}",
                $errno,
                $errstr,
                10,
                STREAM_CLIENT_CONNECT,
                $context
            );

            if ($socket) {
                $this->info('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω');
                fclose($socket);
            } else {
                $this->error("‚ùå –û—à–∏–±–∫–∞ SSL: {$errstr} ({$errno})");
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: ' . $e->getMessage());
        }
    }

    private function sendTestUpdate(string $webhookUrl, string $secret): void
    {
        $this->line('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

        $testUpdate = [
            'update_id' => 123456789,
            'message' => [
                'message_id' => 1,
                'from' => [
                    'id' => 123456789,
                    'is_bot' => false,
                    'first_name' => 'Test',
                    'username' => 'testuser'
                ],
                'chat' => [
                    'id' => 123456789,
                    'first_name' => 'Test',
                    'username' => 'testuser',
                    'type' => 'private'
                ],
                'date' => time(),
                'text' => '/test'
            ]
        ];

        try {
            $headers = ['Content-Type' => 'application/json'];
            if ($secret) {
                $headers['X-Telegram-Bot-Api-Secret-Token'] = $secret;
            }

            $response = Http::timeout(10)
                ->withHeaders($headers)
                ->post($webhookUrl, $testUpdate);

            if ($response->successful()) {
                $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            } else {
                $this->warn("‚ö†Ô∏è  –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {$response->status()}");
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' . $e->getMessage());
        }
    }
} 