<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;
use App\Models\Bot;
use Illuminate\Support\Facades\DB;

class SetupCommand extends Command
{
    protected $signature = 'bot:new {--webhook= : Webhook URL} {--api-host= : Custom API host} {--no-ssl : Disable SSL verification} {--force : Force setup without confirmation}';
    protected $description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞';

    public function handle()
    {
        $this->info('üöÄ Bot Setup Wizard');
        $this->newLine();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–æ—Ç—ã
        $this->showExistingBots();

        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        $botData = $this->collectBotData();
        if (!$botData) {
            return 1;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        $apiHost = $this->option('api-host') ?: 'https://api.telegram.org';
        $noSsl = $botData['no_ssl'] ?? $this->option('no-ssl') ?? false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $currentEnvironment = Bot::getCurrentEnvironment();
        $currentToken = $botData['dev_token'] ?? $botData['prod_token'];
        
        if (!$currentToken) {
            $this->error("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è ({$currentEnvironment}) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            return 1;
        }

        $botInfo = $this->getBotInfo($currentToken, $apiHost, $noSsl);
        if (!$botInfo) {
            return 1;
        }

        // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç Telegram
        $botData = array_merge($botData, [
            'username' => $botInfo['username'],
            'first_name' => $botInfo['first_name'],
            'description' => $botInfo['description'] ?? null,
            'bot_id' => $botInfo['id'],
        ]);

        $this->displayBotInfo($botInfo);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        $bot = $this->saveBotToDatabase($botData);
        if (!$bot) {
            return 1;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $this->createBotClass($botData['name']);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        $webhookUrl = $botData['webhook_url'] ?: $this->option('webhook');
        if ($webhookUrl || $this->confirm('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook?', true)) {
            $this->setupWebhook($bot, $apiHost, $webhookUrl, $noSsl);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $this->setupConfiguration();

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        $this->createDirectories();

        $this->newLine();
        $this->info('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        $this->line("ü§ñ –ë–æ—Ç '{$bot->name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
        $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
        $this->line('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: vendor/bot/bot/docs/');
        $this->line('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: php artisan bot:health');

        return 0;
    }

    private function showExistingBots(): void
    {
        try {
            $bots = Bot::all();
            if ($bots->isNotEmpty()) {
                $this->info('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–æ—Ç—ã:');
                $this->table(
                    ['ID', '–ò–º—è', 'Username', 'Dev Token', 'Prod Token', '–°—Ç–∞—Ç—É—Å', '–°–æ–∑–¥–∞–Ω'],
                    $bots->map(function ($bot) {
                        return [
                            $bot->id,
                            $bot->name,
                            '@' . $bot->username,
                            $bot->hasTokenForEnvironment('dev') ? '‚úÖ' : '‚ùå',
                            $bot->hasTokenForEnvironment('prod') ? '‚úÖ' : '‚ùå',
                            $bot->enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω',
                            $bot->created_at->format('d.m.Y H:i')
                        ];
                    })->toArray()
                );
                $this->newLine();
            }
        } catch (\Exception $e) {
            $this->warn('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate');
            $this->newLine();
        }
    }

    private function collectBotData(): ?array
    {
        $this->info('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞');
        $this->newLine();

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –±–æ—Ç–∞
        $name = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)');
        if (!$name) {
            $this->error('‚ùå –ò–º—è –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if (!preg_match('/^[a-zA-Z][a-zA-Z0-9_]*$/', $name)) {
            $this->error('‚ùå –ò–º—è –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è');
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        try {
            if (Bot::byName($name)->exists()) {
                $this->error("‚ùå –ë–æ—Ç —Å –∏–º–µ–Ω–µ–º '{$name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
                return null;
            }
        } catch (\Exception $e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        $this->info('üîß –¢–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (dev):');
        $devToken = $this->ask('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather)');
        if ($devToken && !preg_match('/^\d+:[A-Za-z0-9_-]{35}$/', $devToken)) {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
            $this->line('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: 123456789:AABBccDDeeFFggHHiiJJkkLLmmNNooP');
            return null;
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        $this->info('üöÄ –¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (prod):');
        $prodToken = $this->ask('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather)');
        if ($prodToken && !preg_match('/^\d+:[A-Za-z0-9_-]{35}$/', $prodToken)) {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
            $this->line('–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: 123456789:AABBccDDeeFFggHHiiJJkkLLmmNNooP');
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω —É–∫–∞–∑–∞–Ω
        if (!$devToken && !$prodToken) {
            $this->error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω (dev –∏–ª–∏ prod)');
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        try {
            if ($devToken && Bot::byToken($devToken)->exists()) {
                $this->error('‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º dev —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return null;
            }
            if ($prodToken && Bot::byToken($prodToken)->exists()) {
                $this->error('‚ùå –ë–æ—Ç —Å —Ç–∞–∫–∏–º prod —Ç–æ–∫–µ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                return null;
            }
        } catch (\Exception $e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        $adminIds = $this->ask('–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
        $adminIdsArray = [];
        if ($adminIds) {
            $adminIdsArray = array_filter(array_map('trim', explode(',', $adminIds)));
            $adminIdsArray = array_map('intval', $adminIdsArray);
        }

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        $noSsl = $this->option('no-ssl') ?: $this->confirm('–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤? (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)', false);

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–º–µ–Ω –¥–ª—è webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) 
        $webhookUrl = $this->option('webhook');
        if (!$webhookUrl) {
            $defaultDomain = parse_url(url('/'), PHP_URL_SCHEME) . '://' . parse_url(url('/'), PHP_URL_HOST);
            $domain = $this->ask('–î–æ–º–µ–Ω –¥–ª—è webhook (Enter = —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω)', $defaultDomain);
            if ($domain) {
                $webhookUrl = rtrim($domain, '/') . "/webhook/{$name}";
            } else {
                $webhookUrl = null;
            }
        }

        return [
            'name' => $name,
            'dev_token' => $devToken,
            'prod_token' => $prodToken,
            'admin_ids' => $adminIdsArray,
            'enabled' => true,
            'webhook_url' => $webhookUrl,
            'no_ssl' => $noSsl,
        ];
    }

    private function getBotInfo(string $token, string $apiHost = 'https://api.telegram.org', bool $noSsl = false): ?array
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
        $this->line("  üåê API —Ö–æ—Å—Ç: {$apiHost}");
        if ($noSsl) {
            $this->warn('  ‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }

        try {
            $url = rtrim($apiHost, '/') . "/bot{$token}/getMe";

            $http = Http::timeout(10);
            if ($noSsl) {
                $http = $http->withOptions([
                    'verify' => false,
                    'curl' => [
                        CURLOPT_SSL_VERIFYPEER => false,
                        CURLOPT_SSL_VERIFYHOST => false,
                    ]
                ]);
            }

            $response = $http->get($url);

            if ($response->successful()) {
                $this->info('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤–∞–ª–∏–¥–µ–Ω');
                return $response->json()['result'];
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ API: ' . $response->status());
                return null;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
            return null;
        }
    }

    private function displayBotInfo(array $botInfo): void
    {
        $this->info('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:');
        $this->line("  üìù –ò–º—è: {$botInfo['first_name']}");
        $this->line("  üÜî Username: @{$botInfo['username']}");
        $this->line("  üì° ID: {$botInfo['id']}");

        if (isset($botInfo['description'])) {
            $this->line("  üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {$botInfo['description']}");
        }

        $this->newLine();
    }

    private function saveBotToDatabase(array $botData): ?Bot
    {
        $this->info('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

        try {
            $bot = Bot::create($botData);
            $this->info('‚úÖ –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
            return $bot;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: ' . $e->getMessage());
            $this->warn('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate');
            return null;
        }
    }

    private function createBotClass(string $botName): void
    {
        $className = ucfirst($botName) . 'Bot';
        $classPath = app_path("Bots/{$className}.php");

        if (file_exists($classPath)) {
            $this->info("‚úÖ –ö–ª–∞—Å—Å –±–æ—Ç–∞ {$className} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return;
        }

        $this->info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞ {$className}...");

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $botsDir = app_path('Bots');
        if (!is_dir($botsDir)) {
            mkdir($botsDir, 0755, true);
        }

        // –®–∞–±–ª–æ–Ω –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
        $classTemplate = "<?php

namespace App\\Bots;

class {$className} extends AbstractBot
{
    public function main(): void
    {
        \$this->commands();
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (\$this->hasMessageText() && \$this->isMessageCommand()) {
            \$this->handleCommand(\$this->getMessageText());
        }


        // –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è, –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        \$this->fallback(function () {
            \$this->sendSelf('‚ùå –û—à–∏–±–∫–∞'); // –ò–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
        });
    }

    public function commands(): void
    {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, description –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
        \$this->registerCommand('start', function () {
            \$this->sendSelf('üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {$botName}');
        }, [
            'description' => '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
        ]);

        \$this->registerCommand('help', function () {
            \$this->sendSelf([
                'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', 
                '', 
                '/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞', 
                '/help - –ü–æ–º–æ—â—å'
                ]
            );
        }, [
            'description' => '–ü–æ–º–æ—â—å'
        ]);
    }

}
";

        try {
            file_put_contents($classPath, $classTemplate);
            $this->info("‚úÖ –ö–ª–∞—Å—Å –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω: {$classPath}");
        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞: {$e->getMessage()}");
        }
    }

    private function setupWebhook(Bot $bot, string $apiHost = 'https://api.telegram.org', string $webhookUrl = null, bool $noSsl = false): void
    {
        if (!$webhookUrl) {
            $defaultUrl = url("/webhook/{$bot->name}");
            $webhookUrl = $this->ask("–í–≤–µ–¥–∏—Ç–µ URL webhook", $defaultUrl);
        }

        if (!$webhookUrl) {
            $this->warn('‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if (!filter_var($webhookUrl, FILTER_VALIDATE_URL)) {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS (–∫—Ä–æ–º–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω --force)
        $isLocal = str_contains($webhookUrl, 'localhost') ||
            str_contains($webhookUrl, '127.0.0.1') ||
            str_contains($webhookUrl, '192.168.') ||
            str_contains($webhookUrl, '.local');

        if (!str_starts_with($webhookUrl, 'https://') && !$isLocal && !$this->option('force')) {
            $this->error('‚ùå URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTPS (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –æ–±—Ö–æ–¥–∞)');
            return;
        }

        if (!str_starts_with($webhookUrl, 'https://') && ($isLocal || $this->option('force'))) {
            $this->warn('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)');
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º secret –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        $secret = $bot->webhook_secret ?? Str::random(32);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $this->info('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
        $this->line("  üåê API —Ö–æ—Å—Ç: {$apiHost}");
        if ($noSsl) {
            $this->warn('  ‚ö†Ô∏è  SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        }

        try {
            $payload = [
                'url' => $webhookUrl,
                'max_connections' => 40,
                'allowed_updates' => [
                    'message',
                    'callback_query',
                    'inline_query',
                    'chosen_inline_result'
                ]
            ];

            if ($secret) {
                $payload['secret_token'] = $secret;
            }

            $token = $bot->getTokenAttribute();
            $url = rtrim($apiHost, '/') . "/bot{$token}/setWebhook";

            $http = Http::timeout(30);
            if ($noSsl) {
                $http = $http->withOptions([
                    'verify' => false,
                    'curl' => [
                        CURLOPT_SSL_VERIFYPEER => false,
                        CURLOPT_SSL_VERIFYHOST => false,
                    ]
                ]);
            }

            $response = $http->post($url, $payload);

            if ($response->successful()) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                $bot->update([
                    'webhook_url' => $webhookUrl,
                    'webhook_secret' => $secret,
                ]);

                $this->info('‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                $this->line("  üåê URL: {$webhookUrl}");
                $this->line("  üîê Secret: {$secret}");
            } else {
                $result = $response->json();
                $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . ($result['description'] ?? 'Unknown error'));
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' . $e->getMessage());
        }
    }

    private function setupConfiguration(): void
    {
        $this->info('‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

        $configPath = config_path('bot.php');

        if (!file_exists($configPath)) {
            $this->warn('‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');

            if ($this->confirm('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?', true)) {
                $this->call('vendor:publish', [
                    '--provider' => 'Bot\Providers\BotServiceProvider',
                    '--tag' => 'config'
                ]);
            }
        } else {
            $this->info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
        }
    }

    private function createDirectories(): void
    {
        $this->info('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');

        $directories = [
            storage_path('app/bot/downloads'),
            storage_path('app/bot/temp'),
            storage_path('logs/bot'),
        ];

        foreach ($directories as $dir) {
            if (!is_dir($dir)) {
                try {
                    mkdir($dir, 0755, true);
                    $this->line("  ‚úÖ –°–æ–∑–¥–∞–Ω–∞: {$dir}");
                } catch (\Exception $e) {
                    $this->error("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {$dir}: {$e->getMessage()}");
                }
            } else {
                $this->line("  ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {$dir}");
            }
        }
    }
}