<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Bot;
use Illuminate\Support\Facades\Http;

class BotCommand extends Command
{
    protected $signature = 'bot:manage 
                            {action : Action (list, show, enable, disable, delete, test)}
                            {bot? : Bot name or ID}
                            {--format=table : Output format (table, json)}';
    
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏';

    public function handle()
    {
        $action = $this->argument('action');

        switch ($action) {
            case 'list':
                return $this->listBots();
            case 'show':
                return $this->showBot();
            case 'enable':
                return $this->enableBot();
            case 'disable':
                return $this->disableBot();
            case 'delete':
                return $this->deleteBot();
            case 'test':
                return $this->testBot();
            default:
                $this->error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                $this->line('–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: list, show, enable, disable, delete, test');
                return 1;
        }
    }

    private function listBots(): int
    {
        try {
            $bots = Bot::orderBy('created_at', 'desc')->get();

            if ($bots->isEmpty()) {
                $this->info('üì≠ –ë–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                $this->line('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: php artisan bot:new');
                return 0;
            }

            $format = $this->option('format');

            if ($format === 'json') {
                $this->line(json_encode($bots->toArray(), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                return 0;
            }

            $currentEnvironment = Bot::getCurrentEnvironment();
            $this->info('ü§ñ –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:');
            $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
            $this->newLine();
            
            $this->table(
                ['ID', '–ò–º—è', 'Username', 'Dev Token', 'Prod Token', 'Dev Domain', 'Prod Domain', '–¢–µ–∫—É—â–∏–π –¢–æ–∫–µ–Ω', '–°—Ç–∞—Ç—É—Å', 'Webhook', '–°–æ–∑–¥–∞–Ω'],
                $bots->map(function ($bot) use ($currentEnvironment) {
                    return [
                        $bot->id,
                        $bot->name,
                        '@' . $bot->username,
                        $bot->hasTokenForEnvironment('dev') ? '‚úÖ' : '‚ùå',
                        $bot->hasTokenForEnvironment('prod') ? '‚úÖ' : '‚ùå',
                        $bot->hasDomainForEnvironment('dev') ? '‚úÖ' : '‚ùå',
                        $bot->hasDomainForEnvironment('prod') ? '‚úÖ' : '‚ùå',
                        $bot->hasTokenForEnvironment($currentEnvironment) ? '‚úÖ' : '‚ùå',
                        $bot->enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω',
                        $bot->webhook_url ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                        $bot->created_at->format('d.m.Y H:i')
                    ];
                })->toArray()
            );

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            $this->warn('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏: php artisan migrate');
            return 1;
        }
    }

    private function showBot(): int
    {
        $botIdentifier = $this->argument('bot');
        
        if (!$botIdentifier) {
            $botIdentifier = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –±–æ—Ç–∞');
        }

        if (!$botIdentifier) {
            $this->error('‚ùå –ò–º—è –∏–ª–∏ ID –±–æ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return 1;
        }

        try {
            $bot = $this->findBot($botIdentifier);
            
            if (!$bot) {
                $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            $currentEnvironment = Bot::getCurrentEnvironment();
            $this->info("ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ '{$bot->name}':");
            $this->newLine();

            $this->line("  üìù –ò–º—è: {$bot->name}");
            $this->line("  üÜî Username: @{$bot->username}");
            $this->line("  üî¢ ID: {$bot->bot_id}");
            $this->line("  üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
            $this->line("  üóùÔ∏è  Dev Token: " . ($bot->hasTokenForEnvironment('dev') ? $bot->getMaskedTokenForEnvironment('dev') : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üóùÔ∏è  Prod Token: " . ($bot->hasTokenForEnvironment('prod') ? $bot->getMaskedTokenForEnvironment('prod') : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üóùÔ∏è  –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: " . ($bot->hasTokenForEnvironment($currentEnvironment) ? $bot->getMaskedTokenForEnvironment($currentEnvironment) : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üåê Dev Domain: " . ($bot->hasDomainForEnvironment('dev') ? $bot->getDomainForEnvironment('dev') : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üåê Prod Domain: " . ($bot->hasDomainForEnvironment('prod') ? $bot->getDomainForEnvironment('prod') : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üåê –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: " . ($bot->hasDomainForEnvironment($currentEnvironment) ? $bot->getDomainForEnvironment($currentEnvironment) : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            $this->line("  üì° –°—Ç–∞—Ç—É—Å: " . ($bot->enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'));
            
            if ($bot->description) {
                $this->line("  üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {$bot->description}");
            }
            
            if ($bot->webhook_url) {
                $this->line("  üåê Webhook: {$bot->webhook_url}");
            }
            
            if ($bot->admin_ids && !empty($bot->admin_ids)) {
                $this->line("  üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: " . implode(', ', $bot->admin_ids));
            }
            
            $this->line("  üìÖ –°–æ–∑–¥–∞–Ω: {$bot->created_at->format('d.m.Y H:i:s')}");
            $this->line("  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {$bot->updated_at->format('d.m.Y H:i:s')}");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞
            if ($bot->botClassExists()) {
                $this->line("  üèóÔ∏è  –ö–ª–∞—Å—Å: ‚úÖ {$bot->getBotClass()}");
            } else {
                $this->line("  üèóÔ∏è  –ö–ª–∞—Å—Å: ‚ùå {$bot->getBotClass()} (–Ω–µ –Ω–∞–π–¥–µ–Ω)");
            }

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }
    }

    private function enableBot(): int
    {
        $botIdentifier = $this->argument('bot');
        
        if (!$botIdentifier) {
            $botIdentifier = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –±–æ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
        }

        try {
            $bot = $this->findBot($botIdentifier);
            
            if (!$bot) {
                $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            if ($bot->enabled) {
                $this->warn("‚ö†Ô∏è  –ë–æ—Ç '{$bot->name}' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
                return 0;
            }

            $bot->update(['enabled' => true]);
            $this->info("‚úÖ –ë–æ—Ç '{$bot->name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }
    }

    private function disableBot(): int
    {
        $botIdentifier = $this->argument('bot');
        
        if (!$botIdentifier) {
            $botIdentifier = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –±–æ—Ç–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è');
        }

        try {
            $bot = $this->findBot($botIdentifier);
            
            if (!$bot) {
                $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            if (!$bot->enabled) {
                $this->warn("‚ö†Ô∏è  –ë–æ—Ç '{$bot->name}' —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω");
                return 0;
            }

            if (!$this->confirm("–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ '{$bot->name}'?", false)) {
                $this->info('–û—Ç–º–µ–Ω–µ–Ω–æ');
                return 0;
            }

            $bot->update(['enabled' => false]);
            $this->info("‚úÖ –ë–æ—Ç '{$bot->name}' –æ—Ç–∫–ª—é—á–µ–Ω");

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }
    }

    private function deleteBot(): int
    {
        $botIdentifier = $this->argument('bot');
        
        if (!$botIdentifier) {
            $botIdentifier = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }

        try {
            $bot = $this->findBot($botIdentifier);
            
            if (!$bot) {
                $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            $this->warn("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!");
            $this->line("–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –±–æ—Ç: {$bot->name} (@{$bot->username})");
            
            if (!$this->confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã?', false)) {
                $this->info('–û—Ç–º–µ–Ω–µ–Ω–æ');
                return 0;
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            $confirmation = $this->ask("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ '{$bot->name}' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
            if ($confirmation !== $bot->name) {
                $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ');
                return 1;
            }

            $bot->delete();
            $this->info("‚úÖ –ë–æ—Ç '{$bot->name}' —É–¥–∞–ª–µ–Ω");

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }
    }

    private function testBot(): int
    {
        $botIdentifier = $this->argument('bot');
        
        if (!$botIdentifier) {
            $botIdentifier = $this->ask('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        }

        try {
            $bot = $this->findBot($botIdentifier);
            
            if (!$bot) {
                $this->error("‚ùå –ë–æ—Ç '{$botIdentifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return 1;
            }

            $currentEnvironment = Bot::getCurrentEnvironment();
            $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ '{$bot->name}'...");
            $this->line("üåç –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: {$currentEnvironment}");
            $this->newLine();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (!$bot->hasTokenForEnvironment($currentEnvironment)) {
                $this->error("‚ùå –¢–æ–∫–µ–Ω –¥–ª—è –æ–∫—Ä—É–∂–µ–Ω–∏—è '{$currentEnvironment}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
                return 1;
            }

            // –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            $this->line('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
            try {
                $token = $bot->getTokenForEnvironment($currentEnvironment);
                $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getMe");
                
                if ($response->successful()) {
                    $botInfo = $response->json()['result'];
                    $this->info('   ‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                    $this->line("   üìù –ò–º—è: {$botInfo['first_name']}");
                    $this->line("   üÜî Username: @{$botInfo['username']}");
                } else {
                    $this->error('   ‚ùå –û—à–∏–±–∫–∞ API: ' . $response->status());
                    return 1;
                }
            } catch (\Exception $e) {
                $this->error('   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
                return 1;
            }

            // –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
            $this->line('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞...');
            if ($bot->botClassExists()) {
                $this->info('   ‚úÖ –ö–ª–∞—Å—Å –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω: ' . $bot->getBotClass());
            } else {
                $this->error('   ‚ùå –ö–ª–∞—Å—Å –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ' . $bot->getBotClass());
            }

            // –¢–µ—Å—Ç webhook
            $this->line('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
            if ($bot->webhook_url) {
                try {
                    $token = $bot->getTokenForEnvironment($currentEnvironment);
                    $response = Http::timeout(10)->get("https://api.telegram.org/bot{$token}/getWebhookInfo");
                    
                    if ($response->successful()) {
                        $webhookInfo = $response->json()['result'];
                        
                        if ($webhookInfo['url'] === $bot->webhook_url) {
                            $this->info('   ‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                        } else {
                            $this->warn("   ‚ö†Ô∏è  Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {$webhookInfo['url']}");
                        }
                    } else {
                        $this->error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook');
                    }
                } catch (\Exception $e) {
                    $this->error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: ' . $e->getMessage());
                }
            } else {
                $this->warn('   ‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            $this->newLine();
            $this->info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞: ' . $e->getMessage());
            return 1;
        }
    }

    private function findBot(string $identifier): ?Bot
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ ID –∏–ª–∏ –∏–º—è
        if (is_numeric($identifier)) {
            return Bot::find($identifier);
        } else {
            return Bot::byName($identifier)->first();
        }
    }
} 